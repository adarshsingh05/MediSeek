import React, { useState } from "react";
import Achievements from "./Achievments";
import HelpSection from "./HelpSection";
import { PatientJourney } from "./PatientJourney";
import { supabase } from "./supabaseClient";
import SignupModal from "./Signup";
import { Link } from 'react-router-dom';


const LandingPage = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [isSignupOpen, setIsSignupOpen] = useState(false);

  const handleFileChange = (e) => {
    setSelectedFile(e.target.files[0]);
  };
  const handleUpload = async () => {
    if (!selectedFile) {
      alert("Please select a file!");
      return;
    }
    setIsUploading(true); // Start Loader
  
    const fileExt = selectedFile.name.split('.').pop();
    const fileName = `${Date.now()}.${fileExt}`; // Unique filename
  
    const { data, error } = await supabase.storage
      .from("usersrep")
      .upload(fileName, selectedFile, {
        cacheControl: "3600",
        upsert: false,
      });
  
    if (error) {
      console.error("Upload failed:", error.message);
      alert("Upload failed. Try again.");
      return;
    }
  
    console.log("Upload successful:", data);
  
    // ‚úÖ Correct File URL
    const fileUrl = `https://rlkflisvqgndvaojqoao.supabase.co/storage/v1/object/public/usersrep/${data.path}`;
    console.log("üìå File URL:", fileUrl);
  
    // üî• Send Data to Backend (MongoDB)
    try {
      const response = await fetch("http://localhost:5000/api/reports/upload", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          patientName: "John Doe", // Replace with actual data
          testType: "Blood Test", // Replace with actual data
          supabaseUrl: fileUrl, // File URL from Supabase
        }),
      });
  
      const result = await response.json();
      if (response.ok) {
        console.log("‚úÖ Report Saved in MongoDB:", result);
        alert("File uploaded and saved to database!");
      } else {
        console.error("‚ùå Failed to save report:", result.message);
        alert("Failed to save report to database.");
      }
    } catch (error) {
      console.error("‚ùå Error sending data to backend:", error);
      alert("Error saving file data.");
    }
    setIsUploading(false); // Stop Loader
  };
  

  

  return (
    <>
    <div className="w-screen min-h-screen">
      {/* Navbar */}
      <nav className="fixed top-0 left-0 w-full flex justify-between items-center px-8 py-4 shadow-md bg-[#edf8fc] z-50">
  <div className="text-2xl font-semibold text-gray-700">
    mediseek.<span className="text-gray-500">ai</span>
  </div>
  <div className="hidden text-xl font-extrabold cursor-pointer md:flex font-mono space-x-6 text-[#434545]">
  {["Home", "Your Reports", "Dashboard", "About", "Features"].map((item) => (
    <li 
      key={item}
      className="px-4 py-2 hover:border-2 rounded-xl border-gray-800 list-none"
    >
      {item === "Your Reports" ? (
        <Link to="/History" className="text-[#434545]">
          {item}
        </Link>
      ) : (
        item
      )}
    </li>
  ))}
</div>
  <button
        onClick={() => setIsSignupOpen(true)}
        className="bg-teal-400 text-black px-4 py-2 rounded-lg hover:bg-teal-500"
      >
        Get In ‚Æû
      </button>

      {/* Signup Modal (Controlled by isSignupOpen) */}
      <SignupModal isOpen={isSignupOpen} onClose={() => setIsSignupOpen(false)} />
</nav>


      {/* Hero Section */}
      <div className="flex flex-col md:flex-row items-center justify-evenly text-center md:text-left py-40 px-6 w-screen bg-gradient-to-b from-[#bce1f1] to-white">
        {/* Left Side - Text */}
        <div className="md:w-1/2 ml-52 mr-[-50px] flex flex-col items-center md:items-start">
          <h1 className="text-5xl font-semibold text-gray-800 w-full">
            Empower your Patients with the Best Technology
          </h1>
          <div className="w-[500px] m-2 ml-10 border-b-2 border-gray-500 my-4"></div>
          <p className="text-gray-700 text-lg w-full max-w-lg">
            Smart Reports processes <span className="font-bold">diagnostic lab test reports</span>, and
            <span className="font-bold"> translates patients‚Äô health and biomarker values </span>
            into easily-understood clinical readings, health tips, and other insights generated by an AI-based medical reasoning engine.
          </p>
          <div >
          <button
            onClick={() => setIsModalOpen(true)}
            className="mt-6 px-6 h-12 cursor-pointer rounded-lg text-lg bg-indigo-700"
          >
            Scan Your Report ‚Æû
          </button>
          </div>
        </div>

        {/* Right Side - Image */}
        <div className="md:w-1/2 flex justify-center items-center">
          <img src="/main.png" alt="Smart Reports Preview" className="w-full max-w-md rounded-lg" />
        </div>
      </div>

     {/* Modal */}
{isModalOpen && (
  <div className="fixed inset-0  bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div className="bg-gray-200 p-6 rounded-lg border-2 border-teal-400 shadow-lg w-[600px] relative">
      
      <h2 className="text-xl font-semibold text-gray-700 mb-4">Upload Your Scanned Blood Report</h2>

      {/* File Upload Input */}
      <input type="file" onChange={handleFileChange} className="mb-4 border p-2 w-full" disabled={isUploading} />

      {/* Show loader while uploading */}
      {isUploading && (
        <div className="flex justify-center items-center my-4">
          <div className="w-6 h-6 border-4 border-blue-500 border-dashed rounded-full animate-spin"></div>
          <span className="ml-2 text-gray-700">Uploading...</span>
        </div>
      )}

      {/* Buttons */}
      <div className="flex justify-between space-x-3 mt-4">
        <button
          onClick={handleUpload}
          className={`px-4 py-2 rounded-lg ${
            isUploading ? "bg-gray-400 cursor-not-allowed" : "bg-green-500 hover:bg-green-600"
          } text-black`}
          disabled={isUploading} // Disable during upload
        >
          {isUploading ? "Uploading..." : "Upload"}
        </button>
        <button
          onClick={() => setIsModalOpen(false)}
          className="bg-gray-500 text-black px-4 py-2 rounded-lg border-2 border-gray-800 hover:bg-gray-600"
          disabled={isUploading} // Prevent closing during upload
        >
          Close
        </button>
      </div>

      {/* Guide Section */}
      <div className="mt-6 p-4 bg-gray-100 rounded-lg border-l-4 border-teal-500 text-gray-700">
        <h3 className="font-semibold text-lg">Guide to Upload Your Blood Report</h3>
        <ul className="list-disc pl-5 text-sm mt-2">
          <li>Do not crop out any part of the image.</li>
          <li>Avoid blurred images.</li>
          <li>Supported file types: <strong>JPEG, JPG, PNG, PDF</strong></li>
          <li>Maximum allowed file size: <strong>2MB</strong></li>
        </ul>
      </div>
    </div>
  </div>
)}

     
    </div>
    <div className="mt-[-70px]">
    <Achievements />
    </div>
    <HelpSection/>
    <PatientJourney/>
    </>
  );
};

export default LandingPage;
